<?php
function getENS_A($ensdomain){
    $ensInfo = [];
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "https://eth.link/dns-query?type=A&name=" . $ensdomain);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $headers = ['Content-Type: application/dns-json'];
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    $output = curl_exec($ch);
    curl_close($ch);
    $json = json_decode($output);
    if(!empty($json)){
        $i = 1;
        foreach ($json->Answer as $data){
            $info = explode('=',str_replace('"', "", $data->data));
            $ensInfo['A'.$i] = trim($info[0]);
            $i=$i+1;
        }
        return $ensInfo;
    }
  }

function getENS_TXT($ensdomain){
    $ensInfo = [];
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "https://eth.link/dns-query?type=TXT&name=" . $ensdomain);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $headers = ['Content-Type: application/dns-json'];
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    $output = curl_exec($ch);
    curl_close($ch);
    $json = json_decode($output);
    if(!empty($json)){
        $i=0;
        foreach ($json->Answer as $data){
            $info = explode('=',str_replace('"', "", $data->data));
            switch($info[0]){
            case 'dnslink':
                $ensInfo[$info[0]] = trim($info[1]);
                break;
            case 'contenthash':
                $ensInfo[$info[0]] = trim($info[1]);
                break;
            case 'a':
                $ensInfo[$info[0]] = trim($info[1]);
                break;
            default:
                $ensInfo[$info[0]] = trim($info[1]);
                $i=$i+1;
                break;
            }
        }
        return $ensInfo;
    }
}

$ensList = getopt("f:");

if(isset($ensList['f'])){
    $file_path = escapeshellcmd($ensList['f']);
    $list = file($file_path);
    $resolved = [];
    $ensResolve = [];
    $header = array('ens'=>'','dnslink'=>'','contenthash'=>'','a'=>'','A1'=>'','A2'=>'');
    if (filesize($file_path)) {
        $output = 'ENSres.csv';
        $file = fopen($output, 'a');
        clearstatcache();
        if (filesize($output) == 0) {
            fputcsv( $file, array_keys($header));    
        }    
        foreach($list as $domain) {
            $ens = trim($domain);
            $ensRestxt = getENS_TXT($ens);
            $ensResA = getENS_A($ens);
            if(!empty($ensRestxt) || !empty($ensResA)){
                $ensResolve = array_merge($ensRestxt,$ensResA);
                $ensResolve = array('ens'=> $ens) + $ensResolve;
                foreach ($ensResolve as $key=>$item){
                    echo $key . ' : ' . $item . PHP_EOL;
                }
                $ensResolve = $ensResolve + array_fill_keys( range(min(array_values($header)),max(array_values($header))),'');
                $ensResolve = array_merge($header,$ensResolve);
                fputcsv( $file, array_values($ensResolve) );
                // array_push($resolved,$ensResolve);
                $list = str_replace($domain, '', $list);
                file_put_contents($file_path, $list);
            }
            echo PHP_EOL;
        }
        fclose($file);
    }
    
}else {
    if (isset($argv[1])) {
        $ens = trim($argv[1]);
      } else{
        $ens = 'vitalik.eth';
        echo "\033[4m No ENS Set, \033[39m Vitalik.eth \033[39m will be used as example.".PHP_EOL;
        echo "To set an ENS:\033[24m \033[32m php ensResolverCLI example.eth \033[39m " . PHP_EOL;
        echo "\033[4mTo check a list of ENS from file:\033[24m \033[32m php ensResolverCLI -f file \033[39m " . PHP_EOL . PHP_EOL;
      }
      $ensRestxt = getENS_TXT($ens);
      $ensResA = getENS_A($ens);
      $ensResolve = array_merge($ensRestxt,$ensResA);
      if(!empty($ensResolve)){
        foreach ($ensResolve as $key=>$item){
          echo $key . ' : ' . $item . PHP_EOL;
        }
      }
}
?>
